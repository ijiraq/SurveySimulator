# This is the OSSOS survey description file.
#
# All lines starting with '#' are ignored, so they are used for comments
#
# Each data line has the format:
# <width> <height> <RA> <DEC> <epoch> <filling_factor> <tracked_fraction> \
#   <obs_code> <efficiency_file_name>
#
# <width>: width of FOV, in degree
# <height>: height of FOV, in degree
# <RA>: Right Ascension of pointing, decimal degree or HH:MM:SS[.ss...]
# <DEC>: Declination of pointing, decimal degree or DD:MM:SS[.ss...]
# <epoch>: epoch of pointing, in Julian day (decimal)
# <filling_factor>: filling factor of that FOV
# <obs_code>: observatory code
# <efficiency_file_name>: name of efficiency file for that pointing
#
# For Megaprime, the 36 CCDs are 2048x4612 with pixels 0.18689x0.18689", so
# assuming a total footprint of 1 sq.deg, the filling factor is 0.9164
#
# 2013A-E block
#
# From JJ's e-mail on Dec. 2nd, 2014, there were 7 chips out of 756 that had
# a PSF problem, thus the pipeline did not run to the end. All other cases
# had good trans.jmp files and completed correctly. So effective surface
# area is 749/756 = 99.07%, so filling factor is 0.9907*0.9164=0.9079
#
21.00 14:15:28.89 -12:32:28.5 2456391.86686 0.9079 500 2013AE.eff
#
# 2013A-O block
#
# From my own work and from JJ's e-mail from Nov. 30th, 2014, there were 9
# chips out of 756 which had bad trans.jmp files. So the effective search area
# was 747/756 = 98.81% of the total area, so the filling factor is
# 0.9881*0.9164 = 0.9055
#
21.00 15:58:01.35 -12:19:54.2 2456420.95956 0.9055 500 2013AO.eff
#
# 2013B-L block
#
# From checking the vtags of Lblock_redo, only 20 fields were searched, and out
# of the 720 chips, 1 had problems at step2 which propaged to step3 and
# combine. So effective surface area is 719/720 = 99.86% of the total area, so
# filling factor is 0.9986*0.9164 = 0.9151
#
# Here we use the 'polygon search' feature. Make sure we remove the 1
# sq.deg. field that was not searched, at the bottom of the central column.
#
20.00 00:52:55.81 +03:43:49.1 2456596.72735 0.9151 500 2013BL.eff
#
# 2014B-H block
#
# From checking the vtags of Hblock, I find only 751 chips successful out of
# 756 (my e-mail to JJ from Nov. 30, 2015). In the same time, JJ find only 2
# faulty chips. Until I get an answer from him, I'll stick to my findings.
# So effective surface area is 751/756 = 99.34% of the total area, so
# filling factor is 0.9986*0.9164 = 0.9103
#
# This is using the new feature (as of 2016-03-09) of polygons to describe the
# footprint of the block.
#
21.00 01:35:14.39 +13:28:25.3 2456952.77017 0.9103 500 2014BH.eff
#
# 2015A-P block
#
# This is the first block for which the mosaic includes the ears, making the
# total surface larger than 1 sq.deg. 
# From reading the plate solution of a several images, JMP defined the
# footprint of the camera. It's given in create_ears() in SurveySubs.f.
# From this footprint, we compute the total area covered 0.99443x0.97918 +
# 0.47773x0.21921 = 0.97373 + 0.10473 = 1.0785 sq.deg.
#
# From the plate solutions, the pixel size is 0.186"x0.1849". So the area
# covered by CCD for each chip is 0.025065 sq.deg., or 1.0026 sq.deg. for the
# full camera. Hence the filling factor is 0.9297
#
# According to the vtags, number of files and notes on the block blinking wiki,
# 2 out of 800 chips failed, so effective area is 
# 798/800 = 0.9975 = 99.75% of the total area, so filling factor becomes
# 0.99875*0.9297 = 0.9274.
#
# Now, there is a chance there is some overlap between the different frames.
# Actually, it's a known fact as some object(s) got observed twice in the
# discovery run. The overlap is measured using SurfArea.f.
# From counting how many objects are found in multiple pointings, we get the
# effective area as:
# Effective area / Assumed area = 1./(1. + float(n_track-hist(1))/float(n_track)).
# Here, n_track = 1000000 and hist(1) = 994446 so the factor is 1./1.005554
# So the filling factor is 0.9975*0.9297/1.005554 = 0.9223.
#
# This final filling factor is all good if we use the footprint of the 40 CCDs
# with ears. If we use some other polygon, we must first compute the area of
# the said polygon, S_p, and then compare it to the actual effective area of
# all pixels, Sccd x num_ccd x overlap_factor = 0.025065*798/1.005554 = 19.89139
# sq.deg.
#
# In the following, the total surface area is 2*2.721979*(2.983277+0.994426)
# = 21.6544 sq.deg. So the final filling factor is effective area / total
# surface area = 19.89139/21.6544 = 0.9186
#
21.65 13:30:22.11 -07:47:23.0 2457125.86971 0.9186 500 2015AP.eff
#
# 2015A-M block
#
# This is a block for which the mosaic includes the ears, making the
# total surface larger than 1 sq.deg. 
# From reading the plate solution of a several images, JMP defined the
# footprint of the camera. It's given in create_ears() in SurveySubs.f.
# From this footprint, we compute the total area covered 0.99443x0.97918 +
# 0.47773x0.21921 = 0.97373 + 0.10473 = 1.0785 sq.deg.
#
# From the plate solutions, the pixel size is 0.186"x0.1849". So the area
# covered by CCD for each chip is 0.025065 sq.deg., or 1.0026 sq.deg. for the
# full camera. Hence the filling factor is 0.9297
#
# According to the vtags, 0 out of 800 chips failed, so effective area is
# 800/800 = 1.0 = 100.0% of the total area, so filling factor becomes
# 1.0*0.9297 = 0.9297.
#
# Now, there is a chance there is some overlap between the different frames.
# Actually, it's a known fact as some object(s) got observed twice in the
# discovery run. The overlap is measured using SurfArea.f.
# From counting how many objects are found in multiple pointings, we get the
# effective area as:
# Effective area / Assumed area = 1./(1. + float(n_track-hist(1))/float(n_track)).
# Here, n_track = 1000000 and hist(1) = 994672 so the factor is 1./1.005328
# So the filling factor is 1.0*0.9297/1.005328 = 0.9248.
#
# This final filling factor is all good if we use the footprint of the 40 CCDs
# with ears. If we use some other polygon, we must first compute the area of
# the said polygon, S_p, and then compare it to the actual effective area of
# all pixels, Sccd x num_ccd x overlap_factor = 0.025065*800/1.005328 = 19.94573
# sq.deg.
#
# In the following, the total surface area is 2*2.721979*(2.983277+0.994426)
# = 21.6544 sq.deg. So the final filling factor is effective area / total
# surface area = 19.94573/21.6544 = 0.9211
#
21.65 15:34:41.30 -12:08:36.0 2457163.81831 0.9211 500 2015AM.eff
#
# 2015B-S block
#
# This is the first block for which the mosaic includes the ears, making the
# total surface larger than 1 sq.deg. 
# From reading the plate solution of a several images, JMP defined the
# footprint of the camera. It's given in create_ears() in SurveySubs.f.
# From this footprint, we compute the total area covered 0.99443x0.97918 +
# 0.47773x0.21921 = 0.97373 + 0.10473 = 1.0785 sq.deg.
#
# From the plate solutions, the pixel size is 0.186"x0.1849". So the area
# covered by CCD for each chip is 0.025065 sq.deg., or 1.0026 sq.deg. for the
# full camera. Hence the filling factor is 0.9297
#
# According to the vtags, number of files and notes on the block blinking wiki,
# 0 out of 400 chips failed, so effective area is 
# 400/400 = 1.0 = 100.0% of the total area, so filling factor becomes
# 1.0*0.9297 = 0.9297.
#
# Now, there is a chance there is some overlap between the different frames.
# Actually, it's a known fact as some object(s) got observed twice in the
# discovery run. The overlap is measured using SurfArea.f.
# From counting how many objects are found in multiple pointings, we get the
# effective area as:
# Effective area / Assumed area = 1./(1. + float(n_track-hist(1))/float(n_track)).
# Here, n_track = 1000000 and hist(1) = 995995 so the factor is 1./1.004005
# So the filling factor is 1.0*0.9297/1.004005 = 0.92599.
#
# This final filling factor is all good if we use the footprint of the 40 CCDs
# with ears. If we use some other polygon, we must first compute the area of
# the said polygon, S_p, and then compare it to the actual effective area of
# all pixels, Sccd x num_ccd x overlap_factor = 0.025065*400/1.004005 = 9.98601
# sq.deg.
#
# In the following, the total surface area is 2*2.721979*(1.98885125+0.)
# = 10.8272 sq.deg. So the final filling factor is effective area / total
# surface area = 9.98601/10.8272 = 0.9223
#
10.83 00:30:08.35 +06:00:09.5 2457274.92965 0.9223 500 2015BS.eff
#
# 2015B-T block
#
# This is the first block for which the mosaic includes the ears, making the
# total surface larger than 1 sq.deg. 
# From reading the plate solution of a several images, JMP defined the
# footprint of the camera. It's given in create_ears() in SurveySubs.f.
# From this footprint, we compute the total area covered 0.99443x0.97918 +
# 0.47773x0.21921 = 0.97373 + 0.10473 = 1.0785 sq.deg.
#
# From the plate solutions, the pixel size is 0.186"x0.1849". So the area
# covered by CCD for each chip is 0.025065 sq.deg., or 1.0026 sq.deg. for the
# full camera. Hence the filling factor is 0.9297
#
# According to the vtags, number of files and notes on the block blinking wiki,
# 0 out of 400 chips failed, so effective area is 
# 400/400 = 1.0 = 100.0% of the total area, so filling factor becomes
# 1.0*0.9297 = 0.9297.
#
# Now, there is a chance there is some overlap between the different frames.
# Actually, it's a known fact as some object(s) got observed twice in the
# discovery run. The overlap is measured using SurfArea.f.
# From counting how many objects are found in multiple pointings, we get the
# effective area as:
# Effective area / Assumed area = 1./(1. + float(n_track-hist(1))/float(n_track)).
# Here, n_track = 1000000 and hist(1) = 995991 so the factor is 1./1.004009
# So the filling factor is 1.0*0.9297/1.004009 = 0.9260.
#
# This final filling factor is all good if we use the footprint of the 40 CCDs
# with ears. If we use some other polygon, we must first compute the area of
# the said polygon, S_p, and then compare it to the actual effective area of
# all pixels, Sccd x num_ccd x overlap_factor = 0.025065*400/1.004009 = 9.98597
# sq.deg.
#
# In the following, the total surface area is 2*2.721979*(1.98885125+0.)
# = 10.8272 sq.deg. So the final filling factor is effective area / total
# surface area = 9.98597/10.8272 = 0.9223
#
10.83 00:30:08.35 +04:02:04.5 2457273.92965 0.9223 500 2015BT.eff
#
# 2015B-D block
#
# For this block the mosaic includes the ears, making the total surface larger
# than 1 sq.deg.
# From reading the plate solution of a several images, JMP defined the
# footprint of the camera. It's given in create_ears() in SurveySubs.f.
# From this footprint, we compute the total area covered 0.99443x0.97918 +
# 0.47773x0.21921 = 0.97373 + 0.10473 = 1.0785 sq.deg.
#
# From the plate solutions, the pixel size is 0.186"x0.1849". So the area
# covered by CCD for each chip is 0.025065 sq.deg., or 1.0026 sq.deg. for the
# full camera. Hence the filling factor is 0.9297
#
# According to the vtags, number of files and notes on the block blinking wiki,
# 0 out of 320 chips failed, so effective area is 
# 320/320 = 1.0 = 100.0% of the total area, so filling factor becomes
# 1.0*0.9297 = 0.9297.
#
# Now, there is a chance there is some overlap between the different frames.
# Actually, it's a known fact as some object(s) got observed twice in the
# discovery run. The overlap is measured using SurfArea.f.
# From counting how many objects are found in multiple pointings, we get the
# effective area as:
# Effective area / Assumed area = 1./(1. + float(n_track-hist(1))/float(n_track)).
# Here, n_track = 1000000 and hist(1) = 994686 so the factor is 1./1.005314
# So the filling factor is 1.0*0.9297/1.005314 = 0.92479.
#
# This final filling factor is all good if we use the footprint of the 40 CCDs
# with ears. If we use some other polygon, we must first compute the area of
# the said polygon, S_p, and then compare it to the actual effective area of
# all pixels, Sccd x num_ccd x overlap_factor = 0.025065*320/1.005314 = 7.97840
# sq.deg.
#
# In the following, the total surface area is 2*1.0887916*(2.3866217+1.5910813)
# = 8.66178 sq.deg. So the final filling factor is effective area / total
# surface area = 7.97840/8.66178 = 0.9211
#
#poly 4 03:08:30.88 +15:46:36.6 2457333.85377 0.9211 500 2015BD.eff
8.66 03:12:58.36 +16:16:06.4 2457333.85377 0.9211 500 2015BD.eff
#
# 2015B-C block
#
# For this block the mosaic includes the ears, making the total surface larger
# than 1 sq.deg.
# From reading the plate solution of a several images, JMP defined the
# footprint of the camera. It's given in create_ears() in SurveySubs.f.
# From this footprint, we compute the total area covered 0.99443x0.97918 +
# 0.47773x0.21921 = 0.97373 + 0.10473 = 1.0785 sq.deg.
#
# From the plate solutions, the pixel size is 0.186"x0.1849". So the area
# covered by CCD for each chip is 0.025065 sq.deg., or 1.0026 sq.deg. for the
# full camera. Hence the filling factor is 0.9297
#
# According to the vtags, number of files and notes on the block blinking wiki,
# 0 out of 480 chips failed, so effective area is 
# 480/480 = 1.0 = 100.0% of the total area, so filling factor becomes
# 1.0*0.9297 = 0.9297.
#
# Now, there is a chance there is some overlap between the different frames.
# Actually, it's a known fact as some object(s) got observed twice in the
# discovery run. The overlap is measured using SurfArea.f.
# From counting how many objects are found in multiple pointings, we get the
# effective area as:
# Effective area / Assumed area = 1./(1. + float(n_track-hist(1))/float(n_track)).
# Here, n_track = 1000000 and hist(1) = 995172 so the factor is 1./1.004828
# So the filling factor is 1.0*0.9297/1.004828 = 0.92523.
#
# This final filling factor is all good if we use the footprint of the 40 CCDs
# with ears. If we use some other polygon, we must first compute the area of
# the said polygon, S_p, and then compare it to the actual effective area of
# all pixels, Sccd x num_ccd x overlap_factor = 0.025065*480/1.004828 = 11.97339
# sq.deg.
#
# In the following, the total surface area is 2*1.6331874*(2.5855068+1.3921962)
# = 12.99267 sq.deg. So the final filling factor is effective area / total
# surface area = 11.97339/12.99267 = 0.9215
#
12.99 03:19:52.10 +17:00:44.9 2457332.83884 0.9215 500 2015BC.eff
#
# This is a sample survey description file.
#
# All lines starting with '#' are ignored, so they are used for comments
#
# Each data line has the format:
# <width> <height> <RA> <DEC> <epoch> <filling_factor> <tracked_fraction> \
#   <obs_code> <efficiency_file_name>
#
# <width>: width of FOV, in degree
# <height>: height of FOV, in degree
# <RA>: Right Ascension of pointing, decimal degree or HH:MM:SS[.ss...]
# <DEC>: Declination of pointing, decimal degree or DD:MM:SS[.ss...]
# <epoch>: epoch of pointing, in Julian day (decimal)
# <filling_factor>: filling factor of that FOV
# <obs_code>: observatory code
# <efficiency_file_name>: name of efficiency file for that pointing
#
9.73 01:51:08.00 +15:51:48.0 2455860.843750 0.916 500 ma11la.eff
9.79 01:51:08.00 +13:54:00.0 2455858.963195 0.912 500 ma11la.eff
5.95 01:41:01.70 +28:10:00.0 2456220.904167 0.907 500 ma12ha.eff
5.95 01:49:58.30 +28:10:00.0 2456221.947917 0.907 500 ma12ha.eff
#
# This is a sample survey description file.
#
# All lines starting with '#' are ignored, so they are used for comments
#
# Each data line has the format:
# <width> <height> <RA> <DEC> <epoch> <filling_factor> \
#   <obs_code> <efficiency_file_name>
#
# <width>: width of FOV, in degree
# <height>: height of FOV, in degree
# <RA>: Right Ascension of pointing, decimal degree or HH:MM:SS[.ss...]
# <DEC>: Declination of pointing, decimal degree or DD:MM:SS[.ss...]
# <epoch>: epoch of pointing, in Julian day (decimal)
# <filling_factor>: filling factor of that FOV
# <obs_code>: observatory code
# <efficiency_file_name>: name of efficiency file for that pointing
#
# For Megaprime, the 36 CCDs are 2048x4612 with pixels 0.18689x0.18689", so
# assuming a total footprint of 1 sq.deg, the filling factor is 0.9164
#
# L3h block
#
16.00 13:03:51.43 -06:47:24.4 2452755.8399121 0.81 500 L3h-smooth.eff
#
# This is a sample survey description file.
#
# All lines starting with '#' are ignored, so they are used for comments
#
# Each data line has the format:
# <width> <height> <RA> <DEC> <epoch> <filling_factor> \
#   <obs_code> <efficiency_file_name>
#
# <width>: width of FOV, in degree
# <height>: height of FOV, in degree
# <RA>: Right Ascension of pointing, decimal degree or HH:MM:SS[.ss...]
# <DEC>: Declination of pointing, decimal degree or DD:MM:SS[.ss...]
# <epoch>: epoch of pointing, in Julian day (decimal)
# <filling_factor>: filling factor of that FOV
# <obs_code>: observatory code
# <efficiency_file_name>: name of efficiency file for that pointing
#
# HL6l block 15 sq.deg. Initially 16 pointings, but 2 at the same place
6.00 18:14:00.00 -06:30:00.0 2453909.9164294 0.80  500 HL6l-smooth.eff
8.00 18:18:03.00 -06:30:00.0 2453909.9164294 0.80  500 HL6l-smooth.eff
1.00 18:14:00.00 -11:00:00.0 2453909.9164294 0.80  500 HL6l-smooth.eff
#
# HL6r block 16 sq.deg.
12.00 22:37:52.50 +07:35:00.0 2453996.9038535 0.80  500 HL6r-smooth.eff
4.00 22:35:58.48 +05:30:00.0 2453996.9038535 0.80  500 HL6r-smooth.eff
#
# HL7a block 32 sq.deg.
7.00 12:59:44.79 +61:15:00.0 2454177.9083997 0.90  500 HL7a-smooth.eff
8.00 13:01:41.93 +57:30:00.0 2454177.9083997 0.90  500 HL7a-smooth.eff
10.00 13:07:38.87 +53:00:00.0 2454177.9083997 0.90  500 HL7a-smooth.eff
7.00 13:16:52.99 +48:45:00.0 2454177.9083997 0.90  500 HL7a-smooth.eff
#
# HL7b block 32 sq.deg.
16.00 11:31:54.00 +39:30:00.0 2454182.9163265 0.88  500 HL7b-smooth.eff
16.00 11:33:40.00 +35:30:00.0 2454182.9163265 0.88  500 HL7b-smooth.eff
#
# HL7c block 32 sq.deg.
16.00 11:34:28.22 +31:30:15.0 2454180.9057794 0.89  500 HL7c-smooth.eff  
16.00 11:32:22.08 +27:30:08.7 2454180.9057794 0.89  500 HL7c-smooth.eff
#
# HL7d block 32 sq.deg.
9.00 12:42:10.77 +62:45:00.0 2454199.8415076 0.84  500 HL7d-smooth.eff 
10.00 12:46:11.82 +58:00:00.0 2454199.8415076 0.84  500 HL7d-smooth.eff
8.00 12:53:09.13 +53:30:00.0 2454199.8415076 0.84  500 HL7d-smooth.eff
5.00 13:01:00.78 +50:15:00.0 2454199.8415076 0.84  500 HL7d-smooth.eff
#
# HL7e block 32 sq.deg.
11.00 13:16:24.26 +58:15:00.0 2454212.8461975 0.87  500 HL7e-smooth.eff
8.00 13:20:16.94 +53:30:00.0 2454212.8461975 0.87  500 HL7e-smooth.eff
8.00 13:27:03.84 +49:30:00.0 2454212.8461975 0.87  500 HL7e-smooth.eff
5.00 13:34:50.13 +46:00:00.0 2454212.8461975 0.87  500 HL7e-smooth.eff
#
# HL7j block 32 sq.deg.
15.00 16:20:00.00 +17:00:00.0 2454263.8181902 0.90  500 HL7j-smooth.eff 
8.00 16:23:09.35 +12:30:00.0 2454263.8181902 0.90  500 HL7j-smooth.eff 
7.00 16:23:22.09 +07:30:00.0 2454263.8181902 0.90  500 HL7j-smooth.eff
2.00 16:25:00.00 +02:30:00.0 2454263.8181902 0.90  500 HL7j-smooth.eff
#
# HL7l block 27 sq.deg.
12.00 17:50:36.80 +20:00:00.0 2454263.9342620 0.90  500 HL7l-smooth.eff
15.00 17:44:18.00 +16:30:00.0 2454263.9342620 0.90  500 HL7l-smooth.eff
#
# HL7o block 32 sq.deg.
3.00 22:17:10.00 +13:00:00.0 2454332.7937039 0.90  500 HL7o-smooth.eff
4.00 22:14:35.00 +15:30:00.0 2454332.7937039 0.90  500 HL7o-smooth.eff
3.00 22:13:18.02 +18:00:45.7 2454332.7937039 0.90  500 HL7o-smooth.eff
22.00 22:10:00.02 +25:00:45.7 2454332.7937039 0.90  500 HL7o-smooth.eff
#
# HL7p block 32 sq.deg.
8.00 22:11:36.38 +12:30:33.0 2454349.7989514 0.84  500 HL7p-smooth.eff 
10.00 22:06:24.38 +17:00:33.0 2454349.7989514 0.84  500 HL7p-smooth.eff
14.00 22:02:24.38 +25:00:33.0 2454349.7989514 0.84  500 HL7p-smooth.eff
#
# HL7s block 31 sq.deg.
3.00 23:56:04.32 +39:00:00.0 2454362.8066242 0.98  500 HL7s-smooth.eff 
18.00 23:57:04.13 +28:30:00.0 2454362.8066242 0.98  500 HL7s-smooth.eff
10.00 00:02:02.70 +23:30:00.0 2454362.8066242 0.98  500 HL7s-smooth.eff
#
# HL8a block 30 sq.deg.
12.00 09:24:00.82 +66:30:00.0 2454473.8962679 0.90  500 HL8a-smooth.eff 
18.00 09:23:12.32 +61:30:00.0 2454473.8962679 0.90  500 HL8a-smooth.eff
#
# HL8b block 25 sq.deg.
17.00 09:51:40.55 +63:45:00.0 2454474.9093352 0.90  500 HL8b-smooth.eff 
4.00 09:45:47.70 +59:00:00.0 2454474.9093352 0.90  500 HL8b-smooth.eff
4.00 09:59:26.36 +57:30:00.0 2454474.9093352 0.90  500 HL8b-smooth.eff
#
# HL8h block 11 sq.deg.
1.00 16:33:11.28 +13:47:06.0 2454592.0612175 0.88  500 HL8h-smooth.eff
10.00 16:32:00.07 +09:35:00.0 2454592.0612175 0.88  500 HL8h-smooth.eff
#
# HL8i block 11 sq.deg.
5.00 16:37:30.00 +25:00:00.0 2454595.9743127 0.90  500 HL8i-smooth.eff
6.00 16:08:00.00 +26:00:00.0 2454595.9743127 0.90  500 HL8i-smooth.eff
#
# HL8k block 12 sq.deg.
9.00 17:34:52.33 +25:00:00.0 2454597.9723680 0.90  500 HL8k-smooth.eff
2.00 17:33:49.23 +23:00:00.0 2454597.9723680 0.90  500 HL8k-smooth.eff
1.00 17:36:58.07 +22:00:00.0 2454597.9723680 0.90  500 HL8k-smooth.eff
#
# HL8l block 13 sq.deg.
13.00 17:35:36.30 +19:15:00.0 2454599.9639675 0.90  500 HL8l-smooth.eff
#
# HL8m block 12 sq.deg.
6.00 16:56:57.59 +26:00:00.0 2454616.9307835 0.90  500 HL8m-smooth.eff 
6.00 16:58:10.96 +20:30:00.0 2454616.9307835 0.90  500 HL8m-smooth.eff
#
# HL8n block 11 sq.deg.
10.00 16:53:21.57 +22:00:00.0 2454617.8623710 0.89  500 HL8n-smooth.eff
1.00 16:50:17.94 +28:00:00.0 2454617.8623710 0.89  500 HL8n-smooth.eff
#
# HL8o block 12 sq.deg.
12.10 16:48:12.00 +23:00:00.0 2454624.9487368 0.90  500 HL8o-smooth.eff 
#
# HL9 block 219 sq.deg.
10.00 18:11:12.61 +47:34:30.0 2454994.97183 0.9164 500 HL902-smooth.eff
 6.00 18:35:37.61 +47:34:30.0 2454994.97183 0.9164 500 HL901-smooth.eff
 4.00 18:11:36.90 +49:05:54.0 2454994.97183 0.9164 500 HL901-smooth.eff
10.00 18:54:36.90 +49:05:54.0 2454994.97183 0.9164 500 HL903-smooth.eff
10.00 18:30:00.90 +50:06:14.0 2454994.97183 0.9164 500 HL904-smooth.eff
10.00 18:29:46.90 +51:06:34.0 2454994.97183 0.9164 500 HL905-smooth.eff
10.00 18:29:26.90 +52:07:04.0 2454994.97183 0.9164 500 HL906-smooth.eff
10.00 18:29:06.90 +53:07:34.0 2454994.97183 0.9164 500 HL907-smooth.eff
10.00 18:28:50.90 +54:07:54.0 2454994.97183 0.9164 500 HL908-smooth.eff
10.00 19:10:08.90 +52:07:04.0 2454994.97183 0.9164 500 HL909-smooth.eff
10.00 19:23:54.90 +52:07:04.0 2454994.97183 0.9164 500 HL910-smooth.eff
 9.00 18:05:20.00 +56:09:36.0 2454994.97183 0.9164 500 HL911-smooth.eff
10.00 18:53:20.00 +55:08:36.0 2454994.97183 0.9164 500 HL912-smooth.eff
10.00 18:53:40.00 +56:09:36.0 2454994.97183 0.9164 500 HL913-smooth.eff
10.00 18:53:52.00 +57:10:06.0 2454994.97183 0.9164 500 HL914-smooth.eff
10.00 18:34:46.38 +58:10:44.0 2454994.97183 0.9164 500 HL915-smooth.eff
10.00 18:34:37.38 +59:11:24.0 2454994.97183 0.9164 500 HL916-smooth.eff
10.00 18:34:19.38 +60:12:04.0 2454994.97183 0.9164 500 HL917-smooth.eff
 6.00 19:23:31.38 +59:11:24.0 2454994.97183 0.9164 500 HL918-smooth.eff
 1.00 17:58:54.78 +61:12:35.9 2454994.97183 0.9164 500 HL911-smooth.eff
10.00 18:45:20.78 +61:12:35.9 2454994.97183 0.9164 500 HL919-smooth.eff
10.00 18:52:26.63 +62:43:30.0 2454994.97183 0.9164 500 HL920-smooth.eff
 4.00 19:24:12.63 +62:43:30.0 2454994.97183 0.9164 500 HL918-smooth.eff
 9.00 18:54:11.17 +43:05:45.3 2455034.89755 0.9164 500 HL921-smooth.eff
10.00 19:01:11.17 +42:35:45.3 2455034.89755 0.9164 500 HL922-smooth.eff
